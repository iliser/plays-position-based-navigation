import{j as se,k as s,l as oe,m as ne,d as E,r as n,n as re,e as G,h as ie,p as le,u as i,g as T}from"../chunks/disclose-version.CwVGhwyl.js";import{p as ce,u as ue,r as H,c as de,j as o,$ as pe,f as ve,g as L,s as me,i as e}from"../chunks/runtime.Dsq7FSpV.js";import{k as be}from"../chunks/kb_focus_handler.DK5H8N_4.js";var fe=T('<div><label><input type="checkbox"> </label></div>'),he=T(`<div class="viewport svelte-e59i81"><h1>Position based focus</h1> <p>Allow to focus element based on position of this element on screen.</p> <p>You can navigate through this page by using arrow keys + enter for "click" into elements</p> <p>Utils is split into two parts. First defines which element is focused now, can be focused and manage focus movement by directional events like <br> <code>type Direction = "right" | "left" | "up" | "down";</code> <br> This part is framework agnostic and operate over html dom elements <br> It just emit focus change event on movement and manage current focused node.</p> <p>Second part is responsible for integration first part with dom or framework used <br> It manages keybindings, adding dom elements into registry, remove dom elements from registry, react on focus change events, and manage clicks inputs</p> <p>This page implemented on svelte and second part uses <a href="https://learn.svelte.dev/tutorial/actions" class="svelte-e59i81">svelte actions</a> feature for manage focusable elements</p> <p>Current limitation is you can't nest focusable into each other. Cause <code>'in' | 'out'</code> movement direction is not implemented right now, and this implementation just proof of concept.</p> <h3>Implemented features</h3> <h4>Core</h4> <div><label><input type="checkbox"> Focus management</label></div> <div><label><input type="checkbox"> Horizontal + Vertical movements</label></div> <div><label><input type="checkbox"> Focus change events</label></div> <div><label><input type="checkbox"> Nested(In + Out) movements</label></div> <h4>Svelte binding</h4> <!> <h3>Some examples</h3> <label><input type="checkbox"> Show outline around focusable elements</label> <a href="/grid" class="svelte-e59i81">Grid example</a> <input type="text"></div>`);function we(g,z){ce(z,!0);const{gfocus:D,windowKeydown:N}=be("selected");let l=me(!1),a=function(t){t.classList.add("focusable_outline");const r=D(t);return{destroy(){t.classList.remove(".focusable_outline"),r.destroy()}}};ue(()=>console.log(a));const O=[["Keyboard bindings for movements (up,down,left,right)",!0],["Keyboard bindings for focus/click (Enter)",!0],["Browser focus escape (Escape, double movement to border in start/end)",!0],["Clickable elements (buttons, links, checkboxes)",!0],["Focusable by default elements (textarea, input)",!0],["Autofocus elements",!0],["Focusable by param elements",!1],["Clickable by param elements",!1],["Hover for focus",!1]];var c=G(g,!0,he),P=o(c),_=e(e(P)),k=e(e(_)),y=e(e(k)),w=e(e(y)),x=e(e(w)),U=e(o(x)),F=e(e(x)),V=e(e(F)),Y=e(e(V)),u=e(e(Y)),q=o(u),C=o(q);n(C),C.checked=!0;var d=e(e(u)),J=o(d),j=o(J);n(j),j.checked=!0;var p=e(e(d)),M=o(p),I=o(M);n(I),I.checked=!0;var v=e(e(p)),Q=o(v),S=o(Q);n(S),S.checked=!1;var R=e(e(v)),K=e(e(R)),W=e(e(K)),m=e(e(W)),A=o(m);n(A);var B=e(e(m)),X=e(e(B));H(()=>{re(c,"show-focusable",L(l))}),se("keydown",pe,N,!1),s(_,t=>a(t)),s(k,t=>a(t)),s(y,t=>a(t)),s(w,t=>a(t)),s(U,t=>a(t)),s(F,t=>a(t)),s(u,t=>a(t)),s(d,t=>a(t)),s(p,t=>a(t)),s(v,t=>a(t)),oe(K,()=>O,1,null,(t,r,ge)=>{let Z=()=>i(i(r))[0],$=()=>i(i(r))[1];var b=G(t,!0,fe),ee=o(b),f=o(ee);n(f);var te=e(f),h;H(()=>{h!==(h=$())&&(f.checked=h),ie(te,` ${le(Z())}`)}),s(b,ae=>a(ae)),E(t,b)}),s(m,t=>a(t)),ne(A,()=>L(l),t=>ve(l,t)),s(B,t=>a(t)),s(X,t=>a(t)),E(g,c),de()}export{we as component};
